PREFIX : <https://openprovenance.org/ns/facet/sdc#>
PREFIX dsf: <https://openprovenance.org/ns/facet/dsf#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Field declarations create assertions on the actual field objects

CONSTRUCT {
    ?fieldAssertion rdf:type dsf:ComplianceAssertion ;
                    dsf:assertedOn ?field ;
                    dsf:assertsLabel ?label ;
                    dsf:assertedInScope ?scope ;
                    dsf:assertedByFramework ?framework ;
                    dsf:isExternalFact "true"^^xsd:boolean ;
                    dsf:isGroundAssertion "true"^^xsd:boolean .
}
WHERE {
    # Table has field declaration
    ?table :declaresField ?fieldDecl .
    ?fieldDecl :forFieldName ?fieldName ;
               :hasLabel ?label .
    
    # Find actual field with that name
    ?table :hasRecords ?record .
    ?record :hasField ?field .
    ?field :fieldName ?fieldName .
    
    # Table must be visible somewhere
    ?tableAssertion rdf:type dsf:ComplianceAssertion ;
                    dsf:assertedOn ?table ;
                    dsf:assertedInScope ?scope .
    
    # Label must have an associated framework
    ?label dsf:introducedByFramework ?framework .
    
    # Generate deterministic URI
    BIND(IRI(CONCAT("urn:skolem:",
                    ENCODE_FOR_URI(STR(?field)), "_",
                    ENCODE_FOR_URI(STR(?label)), "_",
                    ENCODE_FOR_URI(STR(?framework)), "_",
                    ENCODE_FOR_URI(STR(?scope)), "_field-decl"))
         AS ?fieldAssertion)
    
    # Only create if doesn't already exist
    FILTER NOT EXISTS {
        ?fieldAssertion rdf:type dsf:ComplianceAssertion .
    }
}