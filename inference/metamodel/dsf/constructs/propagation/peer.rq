PREFIX : <https://openprovenance.org/ns/facet/dsf#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# PEER PROPAGATION: Between sibling containers (same parent)
# Example: Table1 with PHI -> Table2 gets PHI (if same database)
# Automatically copies parameter values

CONSTRUCT {
  ?newAssertion rdf:type :ComplianceAssertion ;
                :assertedByFramework ?framework ;
                :assertedInScope ?scope ;
                :assertedOn ?sibling ;
                :assertsLabel ?label ;
                :derivedFrom ?sourceAssertion ;
                :derivedVia :PeerPropagation ;
                :hasParameterValue ?paramValue .
}
WHERE {
  # Source container has an assertion
  ?sourceAssertion rdf:type :ComplianceAssertion ;
                   :assertsLabel ?label ;
                   :assertedInScope ?scope ;
                   :assertedOn ?source ;
                   :assertedByFramework ?framework .

  # Framework has peer propagation rule for this label
  ?framework :hasPropagationRule ?rule .
  ?rule :propagatesLabel ?label ;
        :propagationBehavior :Peer .

  # Both source and sibling have same parent
  ?parent :contains ?source .
  ?parent :contains ?sibling .

  # Don't propagate to self
  FILTER(?source != ?sibling)

  # Check condition if specified
  # COMMENTED OUT FOR PERFORMANCE - conditional propagation disabled
  # OPTIONAL {
  #   ?rule :hasCondition ?condition .
  #   ?eval rdf:type :ConditionEvaluation ;
  #         :evaluatesCondition ?condition ;
  #         :evaluatedOn ?sibling ;
  #         :evaluatedInScope ?scope ;
  #         :evaluationResult "true"^^xsd:boolean .
  # }
  #
  # # Propagate if no condition or condition is satisfied
  # FILTER (!BOUND(?condition) || BOUND(?eval))

  # Create new assertion URI using skolemization pattern
  BIND(IRI(CONCAT("urn:skolem:",
                  ENCODE_FOR_URI(STR(?sibling)), "_",
                  ENCODE_FOR_URI(STR(?label)), "_",
                  ENCODE_FOR_URI(STR(?framework)), "_",
                  ENCODE_FOR_URI(STR(?scope)), "_assertion")) AS ?newAssertion)

  # Copy parameter values if they exist
  OPTIONAL { ?sourceAssertion :hasParameterValue ?paramValue }

  # Check that this assertion doesn't already exist
  FILTER NOT EXISTS { ?newAssertion rdf:type :ComplianceAssertion }
}
