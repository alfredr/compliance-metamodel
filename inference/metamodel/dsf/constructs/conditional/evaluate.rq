PREFIX dsf: <https://openprovenance.org/ns/facet/dsf#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Evaluate conditional rules (rules with only conditions, no fromLabel)
# These apply toLabel when condition is true, regardless of existing labels

CONSTRUCT {
    ?newAssertion a dsf:ComplianceAssertion ;
                  dsf:assertedOn ?container ;
                  dsf:assertedInScope ?scope ;
                  dsf:assertsLabel ?toLabel ;
                  dsf:assertedByFramework ?framework ;
                  dsf:derivedVia dsf:ConditionalRule .
}
WHERE {
    # Find conditional rules without fromLabel
    ?framework dsf:declaresConditional ?rule .
    ?rule a dsf:ConditionalRule ;
          dsf:toLabel ?toLabel ;
          dsf:hasCondition ?condition .
    
    # Find containers in scopes (anchor to real structure)
    ?container dsf:availableInScope ?scope .
    
    # Check if condition is evaluated as true for this container/scope
    ?eval a dsf:ConditionEvaluation ;
          dsf:evaluatesCondition ?condition ;
          dsf:evaluatedOn ?container ;
          dsf:evaluatedInScope ?scope ;
          dsf:evaluationResult "true"^^xsd:boolean .
    
    # Create deterministic assertion ID
    BIND(IRI(CONCAT("urn:skolem:",
                    ENCODE_FOR_URI(STR(?container)), "_",
                    ENCODE_FOR_URI(STR(?toLabel)), "_",
                    ENCODE_FOR_URI(STR(?framework)), "_",
                    ENCODE_FOR_URI(STR(?scope)), "_assertion")) AS ?newAssertion)
    
    # Check target doesn't exist using the deterministic ID
    FILTER NOT EXISTS {
        ?newAssertion a dsf:ComplianceAssertion .
    }
}