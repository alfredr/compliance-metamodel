PREFIX dsf: <https://openprovenance.org/ns/facet/dsf#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Evaluate unconditional implications (no conditions)
# These are simpler implications that always apply when fromLabel is present

CONSTRUCT {
    ?newAssertion a dsf:ComplianceAssertion ;
                  dsf:assertedOn ?container ;
                  dsf:assertedInScope ?scope ;
                  dsf:assertsLabel ?toLabel ;
                  dsf:assertedByFramework ?framework ;
                  dsf:derivedFrom ?assertion ;
                  dsf:derivedVia dsf:ImplicationRule .
}
WHERE {
    # Find unconditional implications (those without conditions)
    ?framework dsf:declaresImplication ?impl .
    ?impl dsf:fromLabel ?fromLabel ;
          dsf:toLabel ?toLabel .
    
    # Exclude conditional implications
    FILTER NOT EXISTS { ?impl a dsf:ConditionalImplication }
    
    # Find containers with fromLabel in specific scopes (using index)
    ?container dsf:hasLabelInScope ?labelScope .
    ?labelScope dsf:label ?fromLabel ;
               dsf:scope ?scope .
    
    # Find the assertion that created this label (for derivedFrom)
    ?assertion a dsf:ComplianceAssertion ;
               dsf:assertedOn ?container ;
               dsf:assertedInScope ?scope ;
               dsf:assertsLabel ?fromLabel .
    
    # Create deterministic assertion ID
    BIND(IRI(CONCAT("urn:skolem:",
                    ENCODE_FOR_URI(STR(?container)), "_",
                    ENCODE_FOR_URI(STR(?toLabel)), "_",
                    ENCODE_FOR_URI(STR(?framework)), "_",
                    ENCODE_FOR_URI(STR(?scope)), "_assertion")) AS ?newAssertion)
    
    # Check target doesn't exist using the deterministic ID
    FILTER NOT EXISTS {
        ?newAssertion a dsf:ComplianceAssertion .
    }
}