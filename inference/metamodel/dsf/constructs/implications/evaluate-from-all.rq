PREFIX dsf: <https://openprovenance.org/ns/facet/dsf#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Evaluate implications with fromAllLabels that have conditions
# If all required source labels are present IN THE SAME SCOPE, conditions are met, and target doesn't exist, assert the target label

CONSTRUCT {
    ?newAssertion a dsf:ComplianceAssertion ;
                  dsf:assertedOn ?container ;
                  dsf:assertedInScope ?scope ;
                  dsf:assertsLabel ?toLabel ;
                  dsf:assertedByFramework ?framework ;
                  dsf:derivedVia dsf:ImplicationFromAllRule .
}
WHERE {
    # Find implications with fromAllLabels that have conditions
    ?framework dsf:declaresImplication ?impl .
    ?impl a dsf:ConditionalImplication ;
          dsf:fromAllLabels ?fromLabels ;
          dsf:toLabel ?toLabel ;
          dsf:hasCondition ?condition .

    # Find containers and scopes where target doesn't already exist
    ?someAssertion a dsf:ComplianceAssertion ;
                   dsf:assertedOn ?container ;
                   dsf:assertedInScope ?scope .

    FILTER NOT EXISTS {
        ?existing a dsf:ComplianceAssertion ;
                 dsf:assertedOn ?container ;
                 dsf:assertedInScope ?scope ;
                 dsf:assertsLabel ?toLabel .
    }

    # Count how many labels are in the fromAllLabels list
    {
        SELECT ?impl (COUNT(?requiredLabel) AS ?requiredCount)
        WHERE {
            ?impl dsf:fromAllLabels ?fromLabels .
            ?fromLabels rdf:rest*/rdf:first ?requiredLabel .
        }
        GROUP BY ?impl
    }

    # Count how many of the required labels the container has IN THIS SCOPE
    {
        SELECT ?container ?scope ?impl (COUNT(DISTINCT ?presentLabel) AS ?presentCount)
        WHERE {
            ?impl dsf:fromAllLabels ?fromLabels .
            ?fromLabels rdf:rest*/rdf:first ?requiredLabel .
            ?container dsf:hasLabelInScope ?labelScope .
            ?labelScope dsf:label ?requiredLabel ;
                       dsf:scope ?scope .
            BIND(?requiredLabel AS ?presentLabel)
        }
        GROUP BY ?container ?scope ?impl
    }

    # Only proceed if all required labels are present
    FILTER(?presentCount >= ?requiredCount && ?requiredCount > 0)

    # Check conditions using ConditionEvaluation (evaluated by separate queries with scope awareness)
    {
        # RelationLabelCondition: Use pre-evaluated condition results
        ?condition a dsf:RelationLabelCondition .
        ?eval a dsf:ConditionEvaluation ;
              dsf:evaluatesCondition ?condition ;
              dsf:evaluatedOn ?container ;
              dsf:evaluatedInScope ?scope ;
              dsf:evaluationResult "true"^^xsd:boolean .
    } UNION {
        # ContainsLabelCondition: Use pre-evaluated condition results
        ?condition a dsf:ContainsLabelCondition .
        ?eval a dsf:ConditionEvaluation ;
              dsf:evaluatesCondition ?condition ;
              dsf:evaluatedOn ?container ;
              dsf:evaluatedInScope ?scope ;
              dsf:evaluationResult "true"^^xsd:boolean .
    } UNION {
        # CompositeCondition with AND: All sub-conditions must be met
        ?condition a dsf:CompositeCondition ;
                   dsf:logicalOperator dsf:AND ;
                   dsf:hasCondition ?subCondition .

        # This is simplified - in practice would need recursive evaluation
        # For now, assume sub-conditions are already evaluated
        FILTER EXISTS {
            # Check each sub-condition is satisfied
            ?subCondition a ?subCondType .
        }
    } UNION {
        # CompositeCondition with OR: At least one sub-condition must be met
        ?condition a dsf:CompositeCondition ;
                   dsf:logicalOperator dsf:OR ;
                   dsf:hasCondition ?subCondition .

        # This is simplified - in practice would need recursive evaluation
        FILTER EXISTS {
            # Check at least one sub-condition is satisfied
            ?subCondition a ?subCondType .
        }
    } UNION {
        # ComparisonCondition: Already evaluated by comparison/evaluation.rq
        ?condition a dsf:ComparisonCondition .
        ?condition dsf:evaluationResult true .
    }
}
