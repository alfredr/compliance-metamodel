PREFIX dsf: <https://openprovenance.org/ns/facet/dsf#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Evaluate simple implications with single fromLabel
# Uses label-scope index for efficient lookup

CONSTRUCT {
    ?newAssertion a dsf:ComplianceAssertion ;
                  dsf:assertedOn ?container ;
                  dsf:assertedInScope ?scope ;
                  dsf:assertsLabel ?toLabel ;
                  dsf:assertedByFramework ?framework ;
                  dsf:derivedFrom ?assertion ;
                  dsf:derivedVia dsf:ImplicationRule .
}
WHERE {
    # Find implications first
    ?framework dsf:declaresImplication ?impl .
    ?impl a dsf:ConditionalImplication ;
          dsf:fromLabel ?fromLabel ;
          dsf:toLabel ?toLabel .

    # Find containers with fromLabel in specific scopes (using index)
    ?container dsf:hasLabelInScope ?labelScope .
    ?labelScope dsf:label ?fromLabel ;
               dsf:scope ?scope .

    # Find the assertion that created this label (for derivedFrom)
    ?assertion a dsf:ComplianceAssertion ;
               dsf:assertedOn ?container ;
               dsf:assertedInScope ?scope ;
               dsf:assertsLabel ?fromLabel .

    # Check for conditions
    OPTIONAL { ?impl dsf:hasCondition ?condition }

    # Check for evaluations separately (workaround for Oxigraph OPTIONAL issue)
    OPTIONAL {
        SELECT ?impl ?container ?scope ?eval
        WHERE {
            ?impl dsf:hasCondition ?condition2 .
            ?eval a dsf:ConditionEvaluation ;
                  dsf:evaluatesCondition ?condition2 ;
                  dsf:evaluatedOn ?container ;
                  dsf:evaluatedInScope ?scope ;
                  dsf:evaluationResult "true"^^xsd:boolean .
        }
    }

    # Only proceed if no condition or condition is evaluated as true
    FILTER(!BOUND(?condition) || BOUND(?eval))

    # Create deterministic assertion ID
    BIND(IRI(CONCAT("urn:skolem:",
                    ENCODE_FOR_URI(STR(?container)), "_",
                    ENCODE_FOR_URI(STR(?toLabel)), "_",
                    ENCODE_FOR_URI(STR(?framework)), "_",
                    ENCODE_FOR_URI(STR(?scope)), "_assertion")) AS ?newAssertion)

    # Check target doesn't exist using the deterministic ID
    FILTER NOT EXISTS {
        ?newAssertion a dsf:ComplianceAssertion .
    }
}
